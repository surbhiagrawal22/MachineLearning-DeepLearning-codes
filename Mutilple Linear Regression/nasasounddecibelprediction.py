# -*- coding: utf-8 -*-
"""NasaSoundDecibelPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13SKDNJBluAoMnnZDm6Nmr55RWa_bqQ2M

Dataset is taken from UCI Machine Repository https://archive.ics.uci.edu/ml/datasets/Airfoil+Self-Noise# Donor: Dr Roberto Lopez robertolopez '@' intelnics.com Intelnics

Creators: Thomas F. Brooks, D. Stuart Pope and Michael A. Marcolini NASA

The NASA data set comprises different size NACA 0012 airfoils at various wind tunnel speeds and angles of attack. The task is to predict the Scaled cound pressure level in decibels.
"""

import pandas as pd
import numpy as np
import sklearn
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error

"""Reading the dataset"""

pd.set_option('max_columns',10)

dataset=pd.read_csv("/content/airfoil_self_noise.dat",sep="\t",names=["Frequency","Angle of attack","Chord length","Free-stream velocity","Suction side displacement" ,"Scaled sound pressure level"])

#Checking for shape and head/tail and info of data
print(dataset.head())
print(dataset.tail())
print(dataset.info())
print(dataset.shape)

#Checking for presence of any null value, there are no null values present in dataset
print(dataset.isnull().any())

# Finding the correlation among various varaibles to check for multi-colinearity among independent variables
corelation=dataset.corr()
print(corelation)
print(sns.heatmap(corelation))

"""Since no co-relation value is highter than 7 or less than -7, 
no high multi-colinearity exists between independent variables """

#Splitting the dataset in train data and test data using train_test_split from sklearn
X=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

X_train, X_test, y_train, y_test =train_test_split(X,y,random_state=42,test_size=.2,shuffle=True)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Always After splitting, perform the feature scaling
from sklearn.preprocessing import StandardScaler
scalar=StandardScaler()
X_train=scalar.fit_transform(X_train)
X_test=scalar.transform(X_test)

# Building a Multi Linear Regression model
linear=LinearRegression()
linear.fit(X_train,y_train)
pd.set_option('precision',2)
predcitedvalue=linear.predict(X_test)

# print the cofficient and intercepts
print(linear.coef_)
print(linear.intercept_)
# printing the root mean squared error
print(mean_squared_error(y_test,predcitedvalue,squared=False))
print(mean_absolute_error(y_test,predcitedvalue))

# making a new dataframe where orginal values and predicted values are stored
newdataframe=pd.DataFrame([predcitedvalue,y_test]).T

newdataframe.columns=["predictedvalue","originalvalue"]
newdataframe["newcol"]=newdataframe.originalvalue-newdataframe.predictedvalue
print(newdataframe)